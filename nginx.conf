upstream legacy {
    # this will be replaced by the location of the 0.18 package server. For
    # example: `server localhost:8018;`
    server eighteen:80;
}

upstream nineteen {
    # this will be replaced by the location of the 0.19 package server. For
    # example: `server localhost:8019;`
    server nineteen:80;
}

# Select the upstream based on the user agent. Default to the most recent
# version. Elm binaries prior to 0.19 did not set the header, so we can detect
# them by looking for the empty string.
#
# Syntax note: `map` is Nginx's equivalent of `case`.
map $http_user_agent $which_package_server {
    ""           legacy;
    "elm/0.19.0" nineteen; # just here to be explicit; right now it just matters if the header is set at all
    default      nineteen;
}

# the 0.18 binary cannot handle 302 redirects, so we need to allow HTTP
# connections.
map $http_user_agent $https_redirect {
    ""           "dont-redirect";
    "elm/0.19.0" "redirect"; # just here to be explicit; right now it just matters if the header is set at all
    default      "redirect";
}

server {
    # we only want to redirect if the client is using HTTP and can handle redirects.
    if ($scheme = "http") { set $https_redirect "http-${https_redirect}"; }
    if ($https_redirect = "http-redirect") { return 301 https://$host$request_uri; }

    listen       80 default_server;
    server_name  package.elm-lang.org;

    location / {
        proxy_pass http://$which_package_server;
    }

    # `certbot --nginx` will automatically insert configuration after this
    # comment block. It looks like this:
    #
    #   listen 443 ssl;
    #   ssl_certificate /etc/letsencrypt/live/test.letsdosome.science/fullchain.pem;
    #   ssl_certificate_key /etc/letsencrypt/live/test.letsdosome.science/privkey.pem;
    #   include /etc/letsencrypt/options-ssl-nginx.conf;
    #   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}