upstream legacy {
    # this will be replaced by the location of the 0.18 package server. For
    # example: `server localhost:8018;`
    server eighteen:80;
}

upstream nineteen {
    # this will be replaced by the location of the 0.19 package server. For
    # example: `server localhost:8019;`
    server nineteen:80;
}

# we need to select the upstream based on a querystring parameter. That parameter
# will always be present when Elm looks for packages, but probably never when
# people look at the site in a browser. So we'll default to 0.19 (the most recent
# version).
#
# Syntax note: `map` is Nginx's equivalent of a `case` or `switch`. So...
#
#    map $source $dest {
#        "foo"   "bar";
#        default "baz";
#    }
#
# ... is the equivalent of:
#
#    dest =
#        case source of
#             "foo" -> "bar"
#             _     -> "baz"
#
map $http_user_agent $which_package_server {
    ""           legacy;
    "elm/0.19.0" nineteen; # just here to be explicit; right now it just matters if the header is set at all
    default      nineteen;
}

# the 0.18 binary does not know how to consume HTTPS or 302 redirects, so we
# need to allow HTTP connections for 0.18 clients. But we really should force
# 0.19 and browsers to use HTTPS. Fortunately, since we're already parsing the
# version in the querystring this is not terrible.
#
# consequence: we cannot enable HSTS for package.elm-lang.org (or for
# elm-lang.org with the includeSubdomains flag) until 0.18 is no longer
# supported.
map $http_user_agent $https_redirect {
    ""           "dont-redirect";
    "elm/0.19.0" "redirect"; # just here to be explicit; right now it just matters if the header is set at all
    default      "redirect";
}

server {
    #### HACKS ####
    # we cannot have `if` statements outside of `server` or `location` blocks, so
    # they have to go at the top here before they appear to be referenced. This
    # is fine since the stuff in `map` is lazily evaluated.

    # get the elm package version. Yes, I know that this use of `if` is "evil"
    # according to the documentation, and that they suggest using `$arg_foo`
    # instead to get `?foo=bar`. However, their parser does not handle
    # querystring parameters with dashes! So we cannot get
    # `$arg_elm-package-version`. Is there a better way to do this? The internet
    # doesn't seem to think so!

    # we only want to redirect if the package is NOT 0.18 and IS coming in over
    # HTTP. Nginx can't express multiple conditions in an if block, so we just
    # modify the variable inline. Yes, this is another "evil" use. No, there
    # doesn't seem to be a better way to get the rewrite to work properly short
    # of writing our own router.
    if ($scheme = "http") { set $https_redirect "http-${https_redirect}"; }
    if ($https_redirect = "http-redirect") { rewrite .* https://$host$uri; }

    #### HACKS END HERE ####

    listen       80 default_server;
    server_name  package.elm-lang.org;

    location / {
        proxy_pass http://$which_package_server;
    }

    # `certbot --nginx` will automatically insert configuration after this
    # comment block. It looks like this:
    #
    #   listen 443 ssl;
    #   ssl_certificate /etc/letsencrypt/live/test.letsdosome.science/fullchain.pem;
    #   ssl_certificate_key /etc/letsencrypt/live/test.letsdosome.science/privkey.pem;
    #   include /etc/letsencrypt/options-ssl-nginx.conf;
    #   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}